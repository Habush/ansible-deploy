- name: Disable CD-ROM repositories
  become: yes
  lineinfile:
    path: /etc/apt/sources.list
    regexp: '^deb cdrom:'
    line: '#\0'
    backrefs: yes
  when: ansible_facts['os_family'] == 'Debian'

- name: Clean up conflicting Docker repository configurations
  become: yes
  ansible.builtin.file:
    path: "/etc/apt/sources.list.d/docker.list"
    state: absent
  ignore_errors: yes

- name: Clean up additional Docker repository files
  become: yes
  ansible.builtin.file:
    path: "/etc/apt/sources.list.d/docker.list.save"
    state: absent
  ignore_errors: yes

# - name: Update apt cache (with conflict resolution)
#   become: yes
#   ansible.builtin.command: apt-get update --fix-missing
#   register: apt_update
#   failed_when: apt_update.rc != 0 and 'could not be read' not in apt_update.stderr
#   changed_when: "'Reading package lists...' in apt_update.stdout"
#   ignore_errors: yes

# - name: Install Docker with conflict handling
#   block:
#     - name: Attempt standard Docker installation
#       ansible.builtin.apt:
#         name: 
#           - docker.io
#           - docker-compose
#         state: present
#         update_cache: yes
#       register: docker_install
#       ignore_errors: yes

#     - name: Resolve conflicts for local installation
#       when: docker_install is failed and ansible_connection == 'local'
#       block:
#         - name: Remove conflicting containerd
#           ansible.builtin.apt:
#             name: containerd
#             state: absent
#             purge: yes
#           ignore_errors: yes

#         - name: Reinstall Docker after cleanup
#           ansible.builtin.apt:
#             name: 
#               - docker.io
#               - docker-compose
#             state: present
#             update_cache: yes

# - name: Ensure Docker service is running
#   ansible.builtin.service:
#     name: docker
#     state: started
#     enabled: yes

# - name: Add current user to docker group
#   ansible.builtin.user:
#     name: "{{ ansible_user_id | default(ansible_user) }}"
#     groups: docker
#     append: yes

- name: Set configuration variables
  ansible.builtin.set_fact:
    repo_url: "https://github.com/rejuve-bio/custom-atomspace-builder.git"
    install_dir: "/home/{{ ansible_user_id | default(ansible_user) }}/Custom_Atomspace_builder"
    python_version: "3.8"

# Create installation directory with correct permissions upfront
- name: Ensure installation directory exists
  ansible.builtin.file:
    path: "{{ install_dir }}"
    state: directory
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "{{ ansible_user_id | default(ansible_user) }}"
    mode: '0775'
    recurse: yes

- name: Clone repository (force overwrite)
  ansible.builtin.git:
    repo: "{{ repo_url }}"
    dest: "{{ install_dir }}"
    version: master
    clone: yes
    update: yes
    force: yes

# Set recursive permissions for the entire directory
- name: Set correct permissions for installation directory
  ansible.builtin.file:
    path: "{{ install_dir }}"
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "{{ ansible_user_id | default(ansible_user) }}"
    mode: '0775'
    recurse: yes

- name: Create output directory
  ansible.builtin.file:
    path: "{{ install_dir }}/output/shared:output/"
    state: directory
    mode: '0775'

- name: Configure config.yaml from template
  ansible.builtin.template:
    src: templates/config.yaml.j2
    dest: "{{ install_dir }}/config.yaml"
    mode: '0664'

# Create .env file with proper permissions
- name: Configure .env file from template
  ansible.builtin.template:
    src: templates/custom-atomspace-builder.env
    dest: "{{ install_dir }}/.env"
    mode: '0664'
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "docker"

# Explicitly create .docker directory with correct permissions
- name: Ensure .docker directory exists
  ansible.builtin.file:
    path: "{{ install_dir }}/.docker"
    state: directory
    mode: '0775'
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "docker"

- name: Fix permissions for .docker recursively
  ansible.builtin.file:
    path: "{{ install_dir }}/.docker"
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "docker"
    mode: '0775'
    recurse: yes

# Run make build as the correct user
- name: Run make build in the repository root
  ansible.builtin.command: make build
  args:
    chdir: "{{ install_dir }}"
  become: no
  environment:
    HOME: "{{ install_dir }}"

- name: Print completion message
  debug:
    msg: "Custom_Atomspace_builder deployment completed! Docker containers are running."